#!/bin/bash
###################
##### my-bash #####
###################

#to be pasted in .bashrc
#   export MYBASHRC_DIR=~/confignewpc
#   MYBASHRC=$MYBASHRC_DIR/mybashrc
#   if [ -f $MYBASHRC ]; then
#   	. $MYBASHRC
#   else
#   	echo not found $MYBASHRC
#   fi
#	PATH=$PATH:./
#	export PATH

VIM_SERVER=`hostname`

#essential
alias rm="rm -i"
alias cp="cp -i"
alias mv="mv -i"
alias nn="nautilus . &"
alias nns="gksudo nautilus . &"
alias chmodd="chmod 777"
alias findd="find . -name"
alias bashh="gvim --servername $VIM_SERVER --remote $MYBASHRC_DIR/mybashrc"
alias bashhh="gvim --servername $VIM_SERVER --remote ~/scripts-kn/local-bashrc.sh"
alias bassh="source ~/.bashrc"
#alias ctagg="ctags -R --sort=foldcase --c-types=+p --fields=+S *.h *.c"
#alias ctagg="ctags -R --sort=foldcase --c-kinds=f *.h *.c"
alias ctagg="ctags -R --sort=foldcase --fields=+S *.h *.c *.cpp"
alias grep="grep -nrEI --color"
alias xc="tr '\n' ' ' | xclip -selection c"
alias xx="xsel -b"
#alias xxx="| xsel -b"
alias cdd="cd .."
alias cddd="cd ../.."
alias cdddd="cd ../../.."
alias xxx="history | tail -2 | head -1 | cut -d' ' -f5- | xsel -b"
alias pwdd="pwd | xsel -b && pwd"
alias pp="popd"
alias p="pushd"

#essential ls
alias ll="ls -la --color=auto"
alias lsd="ls -d */ --color=auto"
alias lsh="ls -ct | head -n 1"
alias lss="ls -ctrl"
alias lsa="ls -ctrla"
alias lsaa="ls -ctrla | grep -v 4096 | grep -v 65 | tail -n-1"
alias lsa5="ls -ctrla | grep -v 4096 | grep -v 65 | tail -n-5"
# maybe need to modified
#alias vimm="gvim $(ls -ctr | grep -v 4096 | tail -n-1)"
alias vimm="gvim $(ls -ctr | tail -n-1)"

#git
#source $MYBASHRC_DIR/git-completion.bash
alias gits="git status"
alias gita="git commit -a"
alias gitam="git commit -a -m"
alias gitca="git commit --amend"
alias gitb="git branch"
alias gitbr="git branch -r"
alias gitc="git checkout"
alias gitcH="git checkout -f HEAD"
alias gitd="git diff"
alias gitdc="git diff --cached"
alias gitds="git diff --stat"
alias gitdh="git diff HEAD~1.."
#diff staged files with previous commit
#note: git diff only diff unstaged files with previous commit
alias gitdH="git diff HEAD"
alias gitp="git push"
#alias igg=">> .gitignore"
alias gitss="git status | sed '/Untracked/q'"
alias gitst="git stash"
alias gitstl="git stash list"
alias gitg="git tag"
alias gitlo="git log"
alias gitl='git log --pretty="%C(yellow)%H%Creset %an %Cgreen%s%Creset "'
alias gitls="git log --stat"
alias gitll="git log -n1"
alias gitlp="git log -p"
alias gitl1="git log --pretty=oneline"
alias gitllp="git log -p -n1"
alias gitlls="git log --stat -n1"
alias gitld="git log --decorate"
alias gitlld="git log --decorate -n1"
alias gitlg="git log --graph"
alias gitlgg="git log --graph --decorate"
alias gitlggg="git log --graph --decorate --pretty=oneline"
alias gitpl="git pull origin master"
alias gitrs="git reset HEAD~1 --soft"
alias gitrr="git reset HEAD~1"
alias gitff="git format-patch -M -C ~/gitpatch/"
alias gitfo="git format-patch origin"
alias gitse="git send-email --to \"mailingonly@gmail.com\" --from \"insidepower2@gmail.com\" --suppress-cc=all"
alias gitamm="git am -3"
#alias gitlc="git --no-pager log"
alias gitno="git config --global core.pager cat"
alias gitnoo="git config --global core.pager less"
alias gitka="gitk --all"
alias sd="svn diff --diff-cmd=/usr/bin/meld"
# git log `gg filename`
alias gg='git ls-files | /bin/grep -w'
alias gitff="git ls-files"
alias gitvv="git remote -v"
alias gitlf='git log --pretty=format:"%h:%Cblue%an   %Creset%s"'

# convenience
alias acc="apt-cache search"
alias aii="sudo apt-get --force-yes install"
alias auu="sudo apt-get update"
#sudo add-apt-repository "deb http://ftp.science.nus.edu.sg/ubuntu/ jaunty multiverse"
alias ipp="/sbin/ifconfig -a | awk '/(cast)/ { print $2 }' | cut -d':' -f2 | head -1"
alias userlist="cut -d: -f1,3 /etc/passwd"
alias grouplist="cat /etc/group"
alias ccc="cd ~/confignewpc/"
alias ccd="cd ~/Desktop/"

#make
alias ulimitt="ulimit -c unlimited"
alias ulimita="ulimit -a"
#alias mc="make clean"
#alias mm="make"
#alias mml="make -f Makefile.local"
#alias mmcl="make -f Makefile.local clean"
#alias mma="make CC=arm-linux-gcc"
#alias mmcp="make cpmac"

#generate tags without prototype
alias gentags="/usr/bin/find . -path ./arch/ -prune -o -name '*.h' -o -name '*.c' > taglist.file  > filelist.tag && \
ctags -R --sort=foldcase --c-types=-p --fields=-S -L filelist.tag"

#misc
alias cdc="cd ~/confignewpc"
alias vims="gvim -S kn.vim"
alias binn="cd /usr/local/bin"
MY_PROJ_DIR=~/git_wa/mydroid_autolinq-2.1/kernel_imx
alias gppp="cd $MY_PROJ_DIR/src"
alias gppr="cd $MY_PROJ_DIR/ref/mac_ref/modified/"
alias gppt="cd $MY_PROJ_DIR/test"
alias gppo="cd $MY_PROJ_DIR/obj"
alias gppd="cd $MY_PROJ_DIR/../dsplink_1_60/dsplink"
alias mmm="cd $MY_PROJ_DIR && make uImage"
alias dddd="sudo ddd $MY_PROJ_DIR/obj/mac"
alias ddda="sudo ddd $MY_PROJ_DIR/obj/mac --debugger arm-linux-gdb"
alias runb="sudo $MY_PROJ_DIR/test/broadcast"
alias dirf='find . -type d | sed -e "s#[^-][^\/]*\/#  |#g" -e "s#|\([^ ]\)#|-\1#"'
# list all files in this directory, sort by size
alias sizes="du --max-depth=1 -k | sort -nr | cut -f2 | xargs -d '\n' du -sh"
alias psg='ps aux|grep '
# also can check version in /etc/issue or /etc/apt/sources.list
alias ubuntu_version="cat /etc/lsb-release"

#temp
PATH=$PATH:$MYBASHRC_DIR
nir='repo forall -p -c git log nlev_soc_r1.2.5-hc28.. --pretty="[%an] - %s"'
#vim:  %s/^\[\(.........\).\{-}-/[\1]\t/

## vim ##
alias vim72u="cd /usr/share/vim/vim72"
alias gvims="gvim --servername $VIM_SERVER"
alias gvimm="gvim --servername $VIM_SERVER --remote-tab-silent"
alias g="gvim --servername $VIM_SERVER --remote"
alias gs="gvim --servername $VIM_SERVER -S"

#ref-note
#PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
##PS1='${debian_chroot:+($debian_chroot)}\w\e[37m$(__git_ps1 "(%s)")\e[0m>\$ '
#PS1='${debian_chroot:+($debian_chroot)}\w>\$ '
#export PS1='[\u@\h \W]$(__git_ps1 "(%s)")\$ '
# COL_KN_BLUE="\033[3;34m" ; COL_KN_GREEN="\033[0;32m"
#export PS1='${debian_chroot}\u:\e[1;32m\w\e[34m$(__git_ps1 "(%s)")\e[1;0m \n\$ '
export MY_PS1='${debian_chroot}\u:\e[1;32m\w\e[34m$(__git_ps1 "(%s)")\e[1;0m'
#export PS1="\[\`if [[ \$? = "0" ]]; then echo '\e[32m\h\e[0m'; else echo '\e[31m\h\e[0m' ; fi\`:\w \$\n"
export PS1="\[\`if [[ \$? != "0" ]]; then echo '\e[1;31m(Error)\e[0m'; fi\`${MY_PS1}(\`date +%R\`) \n\$ "
#export PS2="> "
[ -e "$HOME/confignewpc/.dircolors" ] && DIR_COLORS="$HOME/confignewpc/.dircolors"
[ -e "$DIR_COLORS" ] || DIR_COLORS=""
eval "`dircolors -b $DIR_COLORS`"

# set bash to use vi in command line editing
set -o vi

# check if apparix (bookmark) exist
if [ -n `which apparix` ]; then
	source ~/confignewpc/apparix.sh
fi

# copy file path to clipboard and output to stdout (no newline)
function cff() {
	FILE_NAME=$PWD"/"$1
	if [ -f $FILE_NAME ] ; then
		echo -n $FILE_NAME | xsel -b && xsel -b
		echo
	else
		if [ ! -d $FILE_NAME ] ; then
			echo -n "file/directory not exist: "
		fi
		echo -n $FILE_NAME | xsel -b && xsel -b
		echo
	fi
}

# use gvim to open the file and go to the line number provided
function vv() {
	echo gvim --servername $VIM_SERVER --remote ${*%:*} +${*##*:}
	gvim --servername $VIM_SERVER --remote ${*%:*} +${*##*:}
}

# change into another user and use the account
function suu() {
	sudo -u $1 bash
}

# move dirA/dirA to dirA (execute this inside dirA/dirA)
function mvdir()
{
	MY_DIR=`basename $PWD`
	echo $MY_DIR
	mv $MY_DIR ../${MY_DIR}_2
	cd ..
	rmdir $MY_DIR
	mv ${MY_DIR}_2 ${MY_DIR}
	cd $MY_DIR
}

# git fetch $1; git rebase $1
function gitfr()
{
	if [ $# -lt 1 ]; then
		echo "usage: gitfc <remote-ref>"
		exit 2
	fi
	git fetch $1
	git rebase $1
}

# extract the filename inside the zip
function znote()
{
	if [ $# -lt 1 ]; then
		echo "need to give zip parameter"
		exit 2
	fi
	zipnote $1 | /bin/grep -v comment | cut -d" " -f 2 | cut -d"/" -f2
}

# create directory and cd into it
function mkcd() { mkdir $1 && cd $1; }
# cd into most recently modified directory
function clss() { cd `ls -ctrd */ | tail -n 1`; }
# cd into previous n last created n directory; e.g. clssn 1=clss; clss 2=second last created dir
function clssn() { cd `ls -ctrd */ | tail -n $1 | head -n 1`; }
# git log oneline = (hash commit) (author-name) (commit-summary)
# usage: gllf "conti_dev/nissan_ev_delete -n6"
function gllf(){ 	if [ $# -ge 1 ]; then PARAM1="${1}" ; fi;
	if [ $# -ge 2 ]; then PARAM2="-n${2}"; fi;
	git log $PARAM1 --pretty="%C(yellow)%H%Creset %an %Cgreen%s%Creset " ${PARAM2} --color; }
# gll 5        - show 5 commits
function gll(){ if [ $# -ge 1 ]; then PARAM1="-n${1}"; fi;
	git log --pretty="%C(yellow)%H%Creset %an %Cgreen%s%Creset " ${PARAM1} --color;}

# regular expression search
# e.g. EFind 'mo*use' -name '*.java' -or -name '*.c'
EFind() {
    if [ -n "$1" ] ; then
        if [ -n "$2" ] ; then
            local testVar="$1"
            shift
            find . -type f \
                -and '(' -not -path '*.git*' ')' \
                -and '(' "$@" ')' \
                -exec grep --color=always -I -i -E -H -n -m 1 "${testVar}" {} ';'
        else
            find . -type f \
                -and '(' -not -path '*.git*' ')' -and '(' -not -path '*.svn*' ')' \
                -exec grep --color=always -I -i -E -H -n -m 1 "$1" {} ';'
        fi
    fi
}

# ubuntu
#gconftool --set /apps/nautilus/preferences/default_folder_viewer --type=string list_view
#gconftool --set /desktop/gnome/interface/can_change_accels --type=bool True

# for reference
#function zugzug() { ssh -A -p <non_standard_port> -t <proxy_server> ssh $1; }

export PATH=$PATH:~/bin
